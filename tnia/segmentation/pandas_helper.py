import pandas as pd
import numpy as np
from skimage import util

from skimage.measure import regionprops

def get_df_centroid_intensity_volume_3D(labels, img, sx=1, sy=1, sz=1):
    stats=pd.DataFrame(columns=['x','y','z','intensity','volume'])
    
    object_list=regionprops(labels,img)

    for o in object_list:
        c=o.centroid
        v=o.area
        i=v*o.mean_intensity

        stats.loc[len(stats)]=[c[2]*sx,c[1]*sy,c[0]*sz,i,v*sx*sy*sz]

    return stats

def filter_with_df(labels, df):
    """ Given a dataframe df that has a label column, draw the corresponding labels from a labels image
    into a new image.  Use case is that caller generates a DataFrame from labels (using regionprops_table)
    then applies filters to it using Pandas indexing, and wants to create a new image with only the filtered
    labels. 
    
    Args:
        labels (_type_): label image
        df (_type_): DataFrame with a label column, which contains rows originally generated by applying regionprops_table
        to labels, but has seen subsequently filtered. 

    Returns:
        int : new label image containing only the labels in df 
    """

    label_indexes = df['label'].to_numpy()

    label_image_filtered = util.map_array(labels, label_indexes, label_indexes)
    
    return label_image_filtered.astype('int32')

def classify_with_df(labels, df, class_name):
    
    label_indexes = df['label'].to_numpy()
    classes = df[class_name].to_numpy()

    label_image_filtered = util.map_array(labels, label_indexes, classes)
    
    return label_image_filtered.astype('int32')

